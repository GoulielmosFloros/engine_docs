"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1129],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,p=function(e,t){if(null==e)return{};var n,a,p={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(p[n]=e[n]);return p}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,p=e.mdxType,l=e.originalType,o=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=s(n),c=p,k=d["".concat(o,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var l=n.length,i=new Array(l);i[0]=c;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r[d]="string"==typeof e?e:p,i[1]=r;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2757:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=n(7462),p=n(3366),l=(n(7294),n(3905)),i=["components"],r={id:"thatopen_ui.TextInput",title:"Class: TextInput",sidebar_label:"TextInput",custom_edit_url:null},o=void 0,s={unversionedId:"api/classes/thatopen_ui.TextInput",id:"api/classes/thatopen_ui.TextInput",title:"Class: TextInput",description:"@thatopen/ui.TextInput",source:"@site/docs/api/classes/thatopen_ui.TextInput.md",sourceDirName:"api/classes",slug:"/api/classes/thatopen_ui.TextInput",permalink:"/api/classes/thatopen_ui.TextInput",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"thatopen_ui.TextInput",title:"Class: TextInput",sidebar_label:"TextInput",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Tabs",permalink:"/api/classes/thatopen_ui.Tabs"},next:{title:"Toolbar",permalink:"/api/classes/thatopen_ui.Toolbar"}},u={},d=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Implements",id:"implements",level:2},{value:"Properties",id:"properties",level:2},{value:"debounce",id:"debounce",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"icon",id:"icon",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"label",id:"label",level:3},{value:"Implementation of",id:"implementation-of",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"name",id:"name",level:3},{value:"Implementation of",id:"implementation-of-1",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"placeholder",id:"placeholder",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"value",id:"value",level:3},{value:"Implementation of",id:"implementation-of-2",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"vertical",id:"vertical",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"Accessors",id:"accessors",level:2},{value:"query",id:"query",level:3},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"type",id:"type",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-8",level:4}],m={toc:d},c="wrapper";function k(e){var t=e.components,n=(0,p.Z)(e,i);return(0,l.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/api/modules/thatopen_ui"},"@thatopen/ui"),".TextInput"),(0,l.kt)("p",null,"Heloooooooooo"),(0,l.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"LitElement")),(0,l.kt)("p",{parentName:"li"},"\u21b3 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"TextInput"))))),(0,l.kt)("h2",{id:"implements"},"Implements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/api/interfaces/thatopen_ui.HasName"},(0,l.kt)("inlineCode",{parentName:"a"},"HasName"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/api/interfaces/thatopen_ui.HasValue"},(0,l.kt)("inlineCode",{parentName:"a"},"HasValue")))),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"debounce"},"debounce"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,l.kt)("strong",{parentName:"p"},"debounce"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"number")),(0,l.kt)("p",null,"Represents the debounce property of the TextInput component.\nThis property is used to control the delay in milliseconds before the ",(0,l.kt)("inlineCode",{parentName:"p"},"input")," event is fired.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"input")," event is debounced to prevent excessive event firing when the user types rapidly."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Default"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"undefined\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'<bim-text-input debounce="500"></bim-text-input>\n')),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components//blob/1c232b0/packages/core/src/components/TextInput/index.ts#L133"},"packages/core/src/components/TextInput/index.ts:133")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"icon"},"icon"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,l.kt)("strong",{parentName:"p"},"icon"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Represents the icon property of the TextInput component.\nThis property is used to display an icon next to the input field."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'<bim-text-input icon="material-symbols:search"></bim-text-input>\n')),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components//blob/1c232b0/packages/core/src/components/TextInput/index.ts#L62"},"packages/core/src/components/TextInput/index.ts:62")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"label"},"label"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,l.kt)("strong",{parentName:"p"},"label"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Represents the label property of the TextInput component.\nThis property is used to display a label above or next to the input field."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'<bim-text-input label="Name"></bim-text-input>\n')),(0,l.kt)("h4",{id:"implementation-of"},"Implementation of"),(0,l.kt)("p",null,"HasName.label"),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components//blob/1c232b0/packages/core/src/components/TextInput/index.ts#L72"},"packages/core/src/components/TextInput/index.ts:72")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"name"},"name"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,l.kt)("strong",{parentName:"p"},"name"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Represents the name property of the TextInput component.\nThis property is used to uniquely identify the input field within a form or group of inputs."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'<bim-text-input name="username"></bim-text-input>\n')),(0,l.kt)("h4",{id:"implementation-of-1"},"Implementation of"),(0,l.kt)("p",null,"HasName.name"),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components//blob/1c232b0/packages/core/src/components/TextInput/index.ts#L82"},"packages/core/src/components/TextInput/index.ts:82")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"placeholder"},"placeholder"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,l.kt)("strong",{parentName:"p"},"placeholder"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Represents the placeholder property of the TextInput component.\nThis property is used to display a hint or a placeholder text inside the input field.\nThe placeholder text is displayed when the input field is empty and loses focus."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'<bim-text-input placeholder="Enter your name.."></bim-text-input>\n')),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components//blob/1c232b0/packages/core/src/components/TextInput/index.ts#L93"},"packages/core/src/components/TextInput/index.ts:93")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"value"},"value"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"value"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," = ",(0,l.kt)("inlineCode",{parentName:"p"},'""')),(0,l.kt)("p",null,"Represents the value property of the TextInput component.\nThis property is used to get or set the current value of the input field."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// Get the current value\nconst currentValue = textInput.value;\n\n// Set a new value\ntextInput.value = "New Value";\n')),(0,l.kt)("h4",{id:"implementation-of-2"},"Implementation of"),(0,l.kt)("p",null,"HasValue.value"),(0,l.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components//blob/1c232b0/packages/core/src/components/TextInput/index.ts#L107"},"packages/core/src/components/TextInput/index.ts:107")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"vertical"},"vertical"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"vertical"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")," = ",(0,l.kt)("inlineCode",{parentName:"p"},"false")),(0,l.kt)("p",null,"Represents the vertical property of the TextInput component.\nThis property is used to control the layout of the input field.\nWhen set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", the input field will be displayed vertically."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Default"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"false\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"<bim-text-input vertical></bim-text-input>\n")),(0,l.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components//blob/1c232b0/packages/core/src/components/TextInput/index.ts#L120"},"packages/core/src/components/TextInput/index.ts:120")),(0,l.kt)("h2",{id:"accessors"},"Accessors"),(0,l.kt)("h3",{id:"query"},"query"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"query"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/api/modules/thatopen_ui#query"},(0,l.kt)("inlineCode",{parentName:"a"},"Query"))),(0,l.kt)("p",null,"Gets the query value derived from the current input value.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"getQuery")," function is assumed to be a utility function that takes a string as input\nand returns a processed query value based on the input."),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/api/modules/thatopen_ui#query"},(0,l.kt)("inlineCode",{parentName:"a"},"Query"))),(0,l.kt)("p",null,"The processed query value derived from the current input value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const textInput = new TextInput();\ntextInput.value = "Key?Value";\nconsole.log(textInput.query);\n')),(0,l.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components//blob/1c232b0/packages/core/src/components/TextInput/index.ts#L172"},"packages/core/src/components/TextInput/index.ts:172")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"type"},"type"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"set")," ",(0,l.kt)("strong",{parentName:"p"},"type"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"value"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,'Sets the type of the input field.\nThe type property determines the behavior of the input field.\nIt can be any of the following: "date", "datetime-local", "email", "month", "password", "search", "tel", "text", "time", "url", "week".\nIf an invalid type is provided, the type will not be changed.'),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// Set the type to "email"\ntextInput.type = "email";\n')),(0,l.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components//blob/1c232b0/packages/core/src/components/TextInput/index.ts#L148"},"packages/core/src/components/TextInput/index.ts:148")))}k.isMDXComponent=!0}}]);