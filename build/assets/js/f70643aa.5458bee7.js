"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8046],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,g=d["".concat(i,".").concat(u)]||d[u]||m[u]||r;return n?o.createElement(g,l(l({ref:t},c),{},{components:n})):o.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4726:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],s={},i=void 0,p={unversionedId:"Tutorials/UserInterface/OBC/ModelsList",id:"Tutorials/UserInterface/OBC/ModelsList",title:"ModelsList",description:"Copying and pasting? We've got you covered! You can find the full source code of this tutorial here.",source:"@site/docs/Tutorials/UserInterface/OBC/ModelsList.mdx",sourceDirName:"Tutorials/UserInterface/OBC",slug:"/Tutorials/UserInterface/OBC/ModelsList",permalink:"/Tutorials/UserInterface/OBC/ModelsList",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EntityAttributes",permalink:"/Tutorials/UserInterface/OBC/EntityAttributes"}},c={},d=[{value:"Managing your loaded models \ud83c\udfe2",id:"managing-your-loaded-models-",level:2},{value:"Setting up the components",id:"setting-up-the-components",level:3},{value:"Creating the models list component",id:"creating-the-models-list-component",level:3}],m={toc:d},u="wrapper";function g(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)(u,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Source",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ThatOpen/engine_ui-components/blob/main/packages/obc/src/components/tables/ModelsList/example.ts"},"here"),".")),(0,r.kt)("h2",{id:"managing-your-loaded-models-"},"Managing your loaded models \ud83c\udfe2"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"What else can we say? The task is really simple: we need to see a list of the loaded models in the app. Let's get into it!"),(0,r.kt)("h3",{id:"setting-up-the-components"},"Setting up the components"),(0,r.kt)("p",null,"First of all, we're going to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"FragmentIfcLoader")," from an existing components instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const ifcLoader = components.get(OBC.IfcLoader);\nawait ifcLoader.setup();\n")),(0,r.kt)("p",null,"The step above is super important as none of the existing functional components setup any tool, they just get it as they are! So, if we don't setup the ",(0,r.kt)("inlineCode",{parentName:"p"},"FragmentIfcLoader")," then the wasm path is not going to be defined and an error will arise \ud83e\udd13. Just after we have setup the loader, let's then configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"FragmentManager")," so any time a model is loaded it gets added to some world scene created before: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fragmentsManager = components.get(OBC.FragmentsManager);\nfragmentsManager.onFragmentsLoaded.add((model) => {\n  if (world.scene) world.scene.three.add(model);\n});\n")),(0,r.kt)("h3",{id:"creating-the-models-list-component"},"Creating the models list component"),(0,r.kt)("p",null,"Allright! Now that some basic events are setup, it's time to create a new fresh models list component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const [modelsList] = CUI.tables.modelsList({ components });\n")),(0,r.kt)("p",null,"Now that we have a brand new models list created, we need to add it to the HTML page. For it, let's create simple BIM panel component where we include the models list and also a pre-made IFC load button \ud83d\udc47"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const panel = BUI.Component.create(() => {\n  const [loadIfcBtn] = CUI.buttons.loadIfc({ components });\n\n  return BUI.html`\n   <bim-panel label="IFC Models">\n    <bim-panel-section label="Importing">\n      ${loadIfcBtn}\n    </bim-panel-section>\n    <bim-panel-section icon="mage:box-3d-fill" label="Loaded Models">\n      ${modelsList}\n    </bim-panel-section>\n   </bim-panel> \n  `;\n});\n')),(0,r.kt)("p",null,"Finally, let's append the BIM Panel to the page to see the models list working \ud83d\ude09"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const app = document.createElement("bim-grid");\napp.layouts = {\n  main: {\n    template: `\n      "panel viewport"\n      / 23rem 1fr\n    `,\n    elements: { panel, viewport },\n  },\n};\n\napp.layout = "main";\ndocument.body.append(app);\n')),(0,r.kt)("p",null,"Congratulations! You've now a ready to go user interface that let's you show and dispose IFC models loaded into your app \ud83e\udd73"),(0,r.kt)("iframe",{src:"https://thatopen.github.io/engine_ui-components/examples/ModelsList"}))}g.isMDXComponent=!0}}]);