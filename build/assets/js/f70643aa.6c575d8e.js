"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[7701],{793:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=t(4848),s=t(8453);const a={},i=void 0,l={id:"Tutorials/UserInterface/OBC/ModelsList",title:"ModelsList",description:"Copying and pasting? We've got you covered! You can find the full source code of this tutorial here.",source:"@site/docs/Tutorials/UserInterface/OBC/ModelsList.mdx",sourceDirName:"Tutorials/UserInterface/OBC",slug:"/Tutorials/UserInterface/OBC/ModelsList",permalink:"/Tutorials/UserInterface/OBC/ModelsList",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EntityAttributes",permalink:"/Tutorials/UserInterface/OBC/EntityAttributes"},next:{title:"\ud83d\udccb API",permalink:"/api/"}},r={},d=[{value:"Managing your loaded models \ud83c\udfe2",id:"managing-your-loaded-models-",level:2},{value:"Setting up the components",id:"setting-up-the-components",level:3},{value:"Creating the models list component",id:"creating-the-models-list-component",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.admonition,{title:"Source",type:"info",children:(0,o.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,o.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_ui-components/blob/main/packages/obc/src/components/tables/ModelsList/example.ts",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"managing-your-loaded-models-",children:"Managing your loaded models \ud83c\udfe2"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"What else can we say? The task is really simple: we need to see a list of the loaded models in the app. Let's get into it!"}),"\n",(0,o.jsx)(n.h3,{id:"setting-up-the-components",children:"Setting up the components"}),"\n",(0,o.jsxs)(n.p,{children:["First of all, we're going to get the ",(0,o.jsx)(n.code,{children:"FragmentIfcLoader"})," from an existing components instance:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const ifcLoader = components.get(OBC.IfcLoader);\nawait ifcLoader.setup();\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The step above is super important as none of the existing functional components setup any tool, they just get it as they are! So, if we don't setup the ",(0,o.jsx)(n.code,{children:"FragmentIfcLoader"})," then the wasm path is not going to be defined and an error will arise \ud83e\udd13. Just after we have setup the loader, let's then configure the ",(0,o.jsx)(n.code,{children:"FragmentManager"})," so any time a model is loaded it gets added to some world scene created before:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const fragmentsManager = components.get(OBC.FragmentsManager);\nfragmentsManager.onFragmentsLoaded.add((model) => {\n  if (world.scene) world.scene.three.add(model);\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"creating-the-models-list-component",children:"Creating the models list component"}),"\n",(0,o.jsx)(n.p,{children:"Allright! Now that some basic events are setup, it's time to create a new fresh models list component:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const [modelsList] = CUI.tables.modelsList({ components });\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now that we have a brand new models list created, we need to add it to the HTML page. For it, let's create simple BIM panel component where we include the models list and also a pre-made IFC load button \ud83d\udc47"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const panel = BUI.Component.create(() => {\n  const [loadIfcBtn] = CUI.buttons.loadIfc({ components });\n\n  return BUI.html`\n   <bim-panel label="IFC Models">\n    <bim-panel-section label="Importing">\n      ${loadIfcBtn}\n    </bim-panel-section>\n    <bim-panel-section icon="mage:box-3d-fill" label="Loaded Models">\n      ${modelsList}\n    </bim-panel-section>\n   </bim-panel> \n  `;\n});\n'})}),"\n",(0,o.jsx)(n.p,{children:"Finally, let's append the BIM Panel to the page to see the models list working \ud83d\ude09"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const app = document.createElement("bim-grid");\napp.layouts = {\n  main: {\n    template: `\n      "panel viewport"\n      / 23rem 1fr\n    `,\n    elements: { panel, viewport },\n  },\n};\n\napp.layout = "main";\ndocument.body.append(app);\n'})}),"\n",(0,o.jsx)(n.p,{children:"Congratulations! You've now a ready to go user interface that let's you show and dispose IFC models loaded into your app \ud83e\udd73"}),"\n",(0,o.jsx)("iframe",{src:"https://thatopen.github.io/engine_ui-components/examples/ModelsList"})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var o=t(6540);const s={},a=o.createContext(s);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);